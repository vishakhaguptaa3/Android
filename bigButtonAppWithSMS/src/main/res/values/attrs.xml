<?xml version="1.0" encoding="utf-8"?>
<resources>

    <!--
    <declare-styleable name="ProgressWheel">
        <attr name="text" format="string" />
        <attr name="textColor" format="color" />
        <attr name="textSize" format="dimension" />
        <attr name="barColor" format="color" />
        <attr name="rimColor" format="color" />
        <attr name="rimWidth" format="dimension" />
        <attr name="spinSpeed" format="dimension" />
        <attr name="delayMillis" format="integer" />
        <attr name="circleColor" format="color" />
        <attr name="radius" format="dimension" />
        <attr name="barWidth" format="dimension" />
        <attr name="barLength" format="dimension" />
        <attr name="contourColor" format="color" />
        <attr name="contourSize" format="dimension" />
    </declare-styleable>
    -->
    <!--
    <declare-styleable name="CircularImageView">
        <attr name="border" format="boolean"></attr>
        <attr name="border_width" format="dimension"></attr>
        <attr name="border_color" format="color"></attr>
        <attr name="shadow" format="boolean"></attr>
    </declare-styleable>
    <declare-styleable name="Theme">
        <attr name="circularImageViewStyle" format="reference"></attr>
    </declare-styleable>

    -->
    <declare-styleable name="RoundedImageView">
        <attr name="corner_radius" format="dimension" />
        <attr name="border_width" format="dimension" />
        <attr name="border_color" format="color" />
        <attr name="mutate_background" format="boolean" />
        <attr name="oval" format="boolean" />
        <attr name="android:scaleType" />
    </declare-styleable>
    <!--<declare-styleable name="MySwitch">

        &lt;!&ndash; Drawable to use as the "thumb" that switches back and forth. &ndash;&gt;
        <attr name="thumb" format="reference" />
        &lt;!&ndash; Drawable to use as the "track" that the switch thumb slides within. &ndash;&gt;
        <attr name="track" format="reference" />
        &lt;!&ndash; Text to use when the switch is in the checked/"on" state. &ndash;&gt;
        <attr name="textOn" format="reference|string" />
        &lt;!&ndash; Text to use when the switch is in the unchecked/"off" state. &ndash;&gt;
        <attr name="textOff" format="reference|string" />

        &lt;!&ndash; drawablw to use when the switch is in the checked/"on" state. &ndash;&gt;
        <attr name="drawableOn" format="reference" />
        &lt;!&ndash; drawablw to use when the switch is in the unchecked/"off" state. &ndash;&gt;
        <attr name="drawableOff" format="reference" />

        &lt;!&ndash; if the switch should operate like iOS UISwitch &ndash;&gt;
        <attr name="pushStyle" format="boolean" />
        &lt;!&ndash; if text should be drawn on the Thumb or On the track. &ndash;&gt;
        <attr name="textOnThumb" format="boolean" />
        &lt;!&ndash; if the thumb should be allowed to move more beyond the switch boundaries &ndash;&gt;
        <attr name="thumbExtraMovement" format="dimension" />
        &lt;!&ndash; Amount of padding on either side of text within the switch thumb. &ndash;&gt;
        <attr name="thumbTextPadding" format="dimension" />
        &lt;!&ndash; Amount of padding on either side of text within the switch track. &ndash;&gt;
        <attr name="trackTextPadding" format="dimension" />
        &lt;!&ndash; TextAppearance style for text displayed on the switch thumb. &ndash;&gt;
        <attr name="switchTextAppearanceAttrib" format="reference" />
        &lt;!&ndash; Minimum width for the switch component &ndash;&gt;
        <attr name="switchMinWidth" format="dimension" />
        &lt;!&ndash; Minimum height for the switch component &ndash;&gt;
        <attr name="switchMinHeight" format="dimension" />
        &lt;!&ndash; Minimum space between the switch and caption text &ndash;&gt;
        <attr name="switchPadding" format="dimension" />
        <attr name="orientation">

            &lt;!&ndash; the switch moves only on the x-axis(horizontally) &ndash;&gt;
            <enum name="horizontal" value="1" />
            &lt;!&ndash; the switch moves only on the y-axis(vertically) &ndash;&gt;
            <enum name="vertical" value="0" />
        </attr>

        &lt;!&ndash;
             the track drawable will be drawn on top of these background. So if
             these back grounds were to be visible, the track has to have transparency
        &ndash;&gt;
        &lt;!&ndash; The background when left side of the switch is visible &ndash;&gt;
        <attr name="leftBackground" format="reference" />

        &lt;!&ndash; The background when right side of the switch is visible &ndash;&gt;
        <attr name="rightBackground" format="reference" />

        &lt;!&ndash; We need a mask drawable to mask the background, then draw the track &ndash;&gt;
        <attr name="backgroundMask" format="reference" />
    </declare-styleable>-->
    <!--<declare-styleable name="mySwitchTextAppearanceAttrib">

        &lt;!&ndash; Text color. &ndash;&gt;
        <attr name="textColor" format="color" />
        &lt;!&ndash; Size of the text. Recommended dimension type for text is "sp" for scaled-pixels (example: 15sp). &ndash;&gt;
        <attr name="textSize" format="dimension" />
        &lt;!&ndash; Style (bold, italic, bolditalic) for the text. &ndash;&gt;
        <attr name="textStyle">
            <flag name="normal" value="0" />
            <flag name="bold" value="1" />
            <flag name="italic" value="2" />
        </attr>

        &lt;!&ndash; Typeface (normal, sans, serif, monospace) for the text. &ndash;&gt;
        <attr name="typeface" format="reference">
            <enum name="normal" value="0" />
            <enum name="sans" value="1" />
            <enum name="serif" value="2" />
            <enum name="monospace" value="3" />
        </attr>
        &lt;!&ndash; Color of the text selection highlight. &ndash;&gt;
        <attr name="textColorHighlight" format="color" />
        &lt;!&ndash; Color of the hint text. &ndash;&gt;
        <attr name="textColorHint" format="color" />
        &lt;!&ndash; Color of the links. &ndash;&gt;
        <attr name="textColorLink" format="color" />
        &lt;!&ndash; Present the text in ALL CAPS. This may use a small-caps form when available. &ndash;&gt;
        &lt;!&ndash; <attr name="textAllCaps" format="boolean" /> &ndash;&gt;
    </declare-styleable>
    &lt;!&ndash; Default style for the Switch widget. &ndash;&gt;
    <attr name="mySwitchStyleAttr" format="reference" />-->

   
    
    <!-- Facebook -->

   
    <declare-styleable name="com_facebook_picker_fragment">
        <attr name="show_pictures" format="boolean" />
        <attr name="extra_fields" format="string" />
        <attr name="show_title_bar" format="boolean" />
        <attr name="title_text" format="string" />
        <attr name="done_button_text" format="string" />
        <attr name="title_bar_background" format="reference" />
        <attr name="done_button_background" format="reference" />
    </declare-styleable>
    <declare-styleable name="com_facebook_friend_picker_fragment">
        <attr name="multi_select" format="boolean" />
    </declare-styleable>
    <declare-styleable name="com_facebook_place_picker_fragment">
        <attr name="radius_in_meters" format="integer" />
        <attr name="results_limit" format="integer" />
        <attr name="search_text" format="string" />
        <attr name="show_search_box" format="boolean" />
    </declare-styleable>
    <declare-styleable name="com_facebook_login_view">
        <attr name="confirm_logout" format="boolean" />
        <attr name="fetch_user_info" format="boolean" />
        <attr name="login_text" format="string" />
        <attr name="logout_text" format="string" />
    </declare-styleable>
    <declare-styleable name="com_facebook_profile_picture_view">
        <attr name="preset_size">

            <!-- Keep in sync with constants in ProfilePictureView -->
            <enum name="small" value="-2" />
            <enum name="normal" value="-3" />
            <enum name="large" value="-4" />
        </attr>
        <attr name="is_cropped" format="boolean" />
    </declare-styleable>

</resources>